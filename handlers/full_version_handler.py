from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from typing import Dict, Any, List
import json
import asyncio

from services.ai_service import AIService
from services.question_service import QuestionService
from services.test_service import TestService
from services.checklist_service import ChecklistService
from config import config
from utils.logger import logger
from utils.message_manager import message_manager

class FullVersionStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    SELECTING_TOPIC = State()
    ANSWERING = State()
    GETTING_RESULTS = State()

class FullVersionHandler:
    def __init__(self):
        self.ai_service = AIService()
        self.question_service = QuestionService()
        self.test_service = TestService()
        self.checklist_service = ChecklistService()
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∏—Ö —Ç–µ—Å—Ç–∞–º
        self.user_sessions: Dict[int, Dict[str, Any]] = {}
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ
        self.total_questions = 10
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ò–ò)
        self.db_questions_count = 5
        
        logger.info("FullVersionHandler initialized")
        
    async def handle_full_version_start(self, callback_query: types.CallbackQuery, state: FSMContext = None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π"""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not config.is_user_authorized(user_id):
            await callback_query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton(text="üîô –ù–∞—á–∞—Ç—å –¥–µ–º–æ-—Ç–µ—Å—Ç", callback_data="start_test")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
            unauthorized_message = await callback_query.message.answer(
                config.messages["unauthorized"],
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = unauthorized_message
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.answer()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.delete_last_message(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        welcome_message = await callback_query.message.answer(
            config.messages["full_version_welcome"],
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_manager.last_messages[user_id] = welcome_message
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
        buttons = []
        for key, value in config.available_topics.items():
            buttons.append([types.InlineKeyboardButton(text=value, callback_data=f"topic_{key}")])
        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.delete_last_message(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
        topic_message = await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_manager.last_messages[user_id] = topic_message
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã, –µ—Å–ª–∏ state –ø–µ—Ä–µ–¥–∞–Ω
        if state:
            await state.set_state(FullVersionStates.SELECTING_TOPIC)
        
    async def handle_topic_selection(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = callback_query.from_user.id
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á —Ç–µ–º—ã –∏–∑ callback_data
        callback_data = callback_query.data
        topic_key = callback_data.replace("topic_", "")
        topic_name = config.available_topics.get(topic_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞")
        
        logger.info(f"User {user_id} selected topic {topic_key}, name: {topic_name}")
        
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {topic_name}")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.delete_last_message(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–∞
        preparing_message = await callback_query.message.answer(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ: {topic_name}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_manager.last_messages[user_id] = preparing_message
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id] = {
            "topic": topic_key,
            "topic_name": topic_name,
            "current_question": 0,
            "questions": [],
            "answers": [],
            "correct_count": 0
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ —Ç–µ–º–µ
        theme_mapping = {
            "ux_ui_basics": "ux_ui_basics",
            "user_research": "user_research"
        }
        
        theme_key = theme_mapping.get(topic_key, "ux_ui_basics")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
        
        # –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ 5 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        db_questions_count = 5
        db_questions = self.question_service.get_questions_by_theme(theme_key, db_questions_count)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(db_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ {theme_key}")
        
        # –ù–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –ò–ò-–≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 5-–π –≤–æ–ø—Ä–æ—Å
        ai_questions = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ 5-–≥–æ
        self.user_sessions[user_id]["needs_ai_questions"] = True
        self.user_sessions[user_id]["ai_questions_count"] = self.total_questions - len(db_questions)
        self.user_sessions[user_id]["topic_name"] = topic_name
        self.user_sessions[user_id]["topic_key"] = theme_key
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –¥–ª—è –±—É–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        unique_tags = self.question_service.get_tags_from_questions_list(db_questions)
        self.user_sessions[user_id]["tags"] = unique_tags
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–µ–≥–∏ –¥–ª—è –±—É–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {', '.join(unique_tags)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ ai_questions –ø—É—Å—Ç–æ–π)
        all_questions = db_questions + ai_questions
        
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –¥—Ä—É–≥–æ–π —Ç–µ–º—ã
        if len(all_questions) < self.total_questions:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ({len(all_questions)}), –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ –¥—Ä—É–≥–æ–π —Ç–µ–º—ã")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥—Ä—É–≥–æ–π —Ç–µ–º—ã
            other_theme_key = "user_research" if theme_key == "ux_ui_basics" else "ux_ui_basics"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            additional_count = self.total_questions - len(all_questions)
            additional_questions = self.question_service.get_questions_by_theme(
                other_theme_key, additional_count
            )
            
            all_questions.extend(additional_questions)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(additional_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ–º—ã {other_theme_key}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ total_questions
        all_questions = all_questions[:self.total_questions]
        logger.info(f"–ò—Ç–æ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(all_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id]["questions"] = all_questions
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        await self._send_question(callback_query, user_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        await state.set_state(FullVersionStates.ANSWERING)
        
    async def _send_question(self, callback_query: types.CallbackQuery, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        session = self.user_sessions.get(user_id)
        if not session:
            await callback_query.message.answer("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
            
        current_q_idx = session["current_question"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ —Ç–µ—Å—Ç
        if current_q_idx >= len(session["questions"]) or current_q_idx >= self.total_questions:
            await self._send_results(callback_query, user_id)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = session["questions"][current_q_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
        options_text = ""
        for idx, opt in enumerate(question["options"]):
            options_text += f"\n<b>–í–∞—Ä–∏–∞–Ω—Ç {idx + 1}:</b> {opt}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å–æ –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        question_text = f"""
<b>–í–æ–ø—Ä–æ—Å {current_q_idx + 1}/{min(len(session['questions']), self.total_questions)}</b>

{question['question']}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>{options_text}
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞
        buttons = []
        for idx, _ in enumerate(question["options"]):
            buttons.append([types.InlineKeyboardButton(
                text=f"–í–∞—Ä–∏–∞–Ω—Ç {idx + 1}", 
                callback_data=f"answer_{idx}"
            )])
        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.delete_last_message(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        new_message = await callback_query.message.answer(question_text, reply_markup=markup, parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        message_manager.last_messages[user_id] = new_message
        
    async def handle_answer(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        user_id = callback_query.from_user.id
        answer_idx = int(callback_query.data.split('_')[1])
        
        session = self.user_sessions.get(user_id)
        if not session:
            await callback_query.answer("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        current_q_idx = session["current_question"]
        question = session["questions"][current_q_idx]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session["answers"].append({
            "question_idx": current_q_idx,
            "user_answer": answer_idx,
            "correct_answer": question["correct_answer"],
            "is_correct": answer_idx == question["correct_answer"],
            "tags": question.get("tags", [])
        })
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if answer_idx == question["correct_answer"]:
            session["correct_count"] += 1
            await callback_query.answer("–í–µ—Ä–Ω–æ! ‚úÖ")
        else:
            await callback_query.answer(f"–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][question['correct_answer']]}")
        
        # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–Ω–æ, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º message_manager
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        session["current_question"] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI-–≤–æ–ø—Ä–æ—Å—ã
        if session.get("needs_ai_questions", False) and session["current_question"] == 5:
            # –£–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–≤–æ–ø—Ä–æ—Å—ã
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generating_message = await callback_query.message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = generating_message
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ API
                if not config.ai_api_key:
                    logger.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                    
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message_manager.delete_last_message(user_id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    error_message = await callback_query.message.answer(
                        "–ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_manager.last_messages[user_id] = error_message
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    ai_questions_count = session.get("ai_questions_count", 5)
                    topic_name = session.get("topic_name", "UX/UI –¥–∏–∑–∞–π–Ω")
                    unique_tags = session.get("tags", [])
                    
                    if unique_tags:
                        tags_text = ", ".join(unique_tags)
                        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–≥–∞–º–∏: {tags_text}")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥–∏ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–º–æ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                        topic_with_tags = f"{topic_name} –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–≥–∞–º: {tags_text}"
                        
                        ai_questions = await self.ai_service.generate_questions(
                            topic=topic_with_tags, 
                            num_questions=ai_questions_count
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏
                        valid_ai_questions = []
                        for q in ai_questions:
                            if all(key in q for key in ['question', 'options', 'correct_answer']):
                                # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫ –≤–æ–ø—Ä–æ—Å–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                                if 'id' not in q:
                                    q['id'] = f"ai_{len(valid_ai_questions)}"
                                valid_ai_questions.append(q)
                            else:
                                logger.error(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏: {q}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        session["questions"].extend(valid_ai_questions)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(valid_ai_questions)} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
                        
                        # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                        session["needs_ai_questions"] = False
            except Exception as e:
                logger.error(f"Error generating questions: {str(e)}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_manager.delete_last_message(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = await callback_query.message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_manager.last_messages[user_id] = error_message
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await self._send_question(callback_query, user_id)
        
    async def _send_results(self, callback_query: types.CallbackQuery, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
        session = self.user_sessions.get(user_id)
        if not session:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = await callback_query.message.answer("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = error_message
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_questions = len(session["answers"])
        correct_answers = session["correct_count"]
        percentage = (correct_answers / total_questions) * 100 if total_questions > 0 else 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–∞—Ö —Å –æ—à–∏–±–∫–∞–º–∏
        tag_errors = {}
        for answer in session["answers"]:
            if not answer["is_correct"]:
                for tag in answer["tags"]:
                    tag_errors[tag] = tag_errors.get(tag, 0) + 1
                    
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫
        sorted_tags = sorted(tag_errors.items(), key=lambda x: x[1], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
        result_text = f"""
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ "{session['topic_name']}"</b>

‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions} ({percentage:.1f}%)

"""
        
        if sorted_tags:
            result_text += "<b>–¢–µ–º—ã —Å –æ—à–∏–±–∫–∞–º–∏:</b>\n"
            for tag, count in sorted_tags:
                result_text += f"- {tag}: {count} –æ—à–∏–±–æ–∫\n"
        else:
            result_text += "<b>–û—Ç–ª–∏—á–Ω–æ! –û—à–∏–±–æ–∫ –Ω–µ—Ç.</b>"
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons = [
            [types.InlineKeyboardButton(text="üìù –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç", callback_data="full_checklist")],
            [types.InlineKeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="full_version")],
            [types.InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–∞—Ö —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞
        session["failed_tags"] = sorted_tags
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.delete_last_message(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        new_message = await callback_query.message.answer(result_text, reply_markup=markup, parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        message_manager.last_messages[user_id] = new_message
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞
            from aiogram.fsm.context import FSMContext
            state = FSMContext(
                storage=callback_query.bot.get_current().fsm_storage,
                key=callback_query.from_user.id
            )
            await state.clear()
        except Exception as e:
            logger.error(f"Error clearing state: {str(e)}")
        
    async def handle_checklist_request(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞"""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = self.user_sessions.get(user_id)
        if not session or not session.get("failed_tags"):
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback_query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = await callback_query.message.answer("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞.")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = error_message
            return
            
        await callback_query.answer()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.delete_last_message(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generating_message = await callback_query.message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_manager.last_messages[user_id] = generating_message
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–∞—Ö —Å –æ—à–∏–±–∫–∞–º–∏
        failed_tags = session.get("failed_tags", [])
        topic_name = session.get("topic_name", "UX/UI –î–∏–∑–∞–π–Ω")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç
        if not failed_tags:
            standard_checklist = self.checklist_service.generate_checklist([])
            
            checklist_text = "<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫.</b>\n\n"
            checklist_text += "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
            
            for resource in standard_checklist["resources"][:5]:
                checklist_text += f"<b>{resource['title']}</b>\n"
                checklist_text += f"{resource['description']}\n"
                if 'url' in resource and resource['url']:
                    checklist_text += f"üîó <a href='{resource['url']}'>{resource['url']}</a>\n"
                checklist_text += "\n"
                
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
            await message_manager.delete_last_message(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º—ã
            buttons = [
                [types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç", callback_data="continue_test")],
                [types.InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="full_version")],
                [types.InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            new_message = await callback_query.message.answer(
                checklist_text, 
                parse_mode="HTML", 
                disable_web_page_preview=True,
                reply_markup=markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = new_message
            return
            
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
            ai_checklist = await self.ai_service.generate_personalized_checklist(
                failed_tags=failed_tags,
                topic=topic_name
            )
            
            # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if ai_checklist and ai_checklist.get("resources"):
                checklist_text = "<b>üìù –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç</b>\n\n"
                
                if ai_checklist.get("explanation"):
                    checklist_text += f"{ai_checklist['explanation']}\n\n"
                    
                checklist_text += "<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b>\n\n"
                
                for resource in ai_checklist["resources"]:
                    checklist_text += f"<b>{resource['title']}</b>\n"
                    checklist_text += f"{resource['description']}\n"
                    if 'url' in resource and resource['url']:
                        checklist_text += f"üîó <a href='{resource['url']}'>{resource['url']}</a>\n"
                    checklist_text += "\n"
                    
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_manager.delete_last_message(user_id)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º—ã
                buttons = [
                    [types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç", callback_data="continue_test")],
                    [types.InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="full_version")],
                    [types.InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å AI —á–µ–∫-–ª–∏—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                new_message = await callback_query.message.answer(
                    checklist_text, 
                    parse_mode="HTML", 
                    disable_web_page_preview=True,
                    reply_markup=markup
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_manager.last_messages[user_id] = new_message
                return
        except Exception as e:
            logger.error(f"Error generating AI checklist: {str(e)}")
            
        # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç
        standard_checklist = self.checklist_service.generate_checklist(failed_tags)
        
        checklist_text = "<b>üìù –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç</b>\n\n"
        checklist_text += standard_checklist.get("tags_analysis", "")
        checklist_text += "\n<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b>\n\n"
        
        for resource in standard_checklist["resources"]:
            checklist_text += f"<b>{resource['title']}</b>\n"
            checklist_text += f"{resource['description']}\n"
            if 'url' in resource and resource['url']:
                checklist_text += f"üîó <a href='{resource['url']}'>{resource['url']}</a>\n"
            checklist_text += "\n"
            
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.delete_last_message(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º—ã
        buttons = [
            [types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç", callback_data="continue_test")],
            [types.InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="full_version")],
            [types.InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —á–µ–∫-–ª–∏—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        new_message = await callback_query.message.answer(
            checklist_text, 
            parse_mode="HTML", 
            disable_web_page_preview=True,
            reply_markup=markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_manager.last_messages[user_id] = new_message
        
    async def handle_continue_test(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = self.user_sessions.get(user_id)
        if not session:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback_query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ç–µ–º
            await self.handle_full_version_start(callback_query, state)
            return
            
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback_query.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç —Å –Ω–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.delete_last_message(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        generating_message = await callback_query.message.answer(
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...",
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_manager.last_messages[user_id] = generating_message
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏ —Ç–µ–≥–∏
        topic_name = session.get("topic_name", "UX/UI –¥–∏–∑–∞–π–Ω")
        topic_key = session.get("topic_key", "ux_ui_basics")
        unique_tags = session.get("tags", [])
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        session["current_question"] = 0
        session["questions"] = []
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò
            if unique_tags and config.ai_api_key:
                tags_text = ", ".join(unique_tags)
                logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–≥–∞–º–∏: {tags_text}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥–∏ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–º–æ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                topic_with_tags = f"{topic_name} –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–≥–∞–º: {tags_text}"
                
                ai_questions = await self.ai_service.generate_questions(
                    topic=topic_with_tags, 
                    num_questions=self.total_questions
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏
                valid_ai_questions = []
                for q in ai_questions:
                    if all(key in q for key in ['question', 'options', 'correct_answer']):
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫ –≤–æ–ø—Ä–æ—Å–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                        if 'id' not in q:
                            q['id'] = f"ai_{len(valid_ai_questions)}"
                        valid_ai_questions.append(q)
                    else:
                        logger.error(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏: {q}")
                
                # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                if valid_ai_questions:
                    session["questions"] = valid_ai_questions
                    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(valid_ai_questions)} –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
                else:
                    # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –±–µ—Ä–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã
                    db_questions = self.question_service.get_questions_by_theme(topic_key, self.total_questions)
                    session["questions"] = db_questions
                    logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º {len(db_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤ –∏–ª–∏ API –∫–ª—é—á–∞, –±–µ—Ä–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã
                db_questions = self.question_service.get_questions_by_theme(topic_key, self.total_questions)
                session["questions"] = db_questions
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º {len(db_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã")
                
        except Exception as e:
            logger.error(f"Error generating new questions: {str(e)}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–µ—Ä–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã
            db_questions = self.question_service.get_questions_by_theme(topic_key, self.total_questions)
            session["questions"] = db_questions
            logger.info(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º {len(db_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã")
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞
        await self._send_question(callback_query, user_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        await state.set_state(FullVersionStates.ANSWERING)
    
    async def handle_back_to_main(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = callback_query.from_user.id
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
            
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback_query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
        buttons = [
            [types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –¥–µ–º–æ-—Ç–µ—Å—Ç", callback_data="start_test")],
            [types.InlineKeyboardButton(text="–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è", callback_data="full_version")]
        ]
        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.delete_last_message(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_message = await callback_query.message.answer(
            config.messages["welcome"],
            reply_markup=markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_manager.last_messages[user_id] = new_message