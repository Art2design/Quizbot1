from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.test_service import TestService
from services.checklist_service import ChecklistService
from services.analytics_service import analytics_service
from config import config
from utils.logger import logger
from utils.message_manager import message_manager

class TestStates(StatesGroup):
    ANSWERING = State()

class TestHandler:
    def __init__(self):
        self.test_service = TestService()  # TestService —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º
        self.checklist_service = ChecklistService(use_demo_mode=True)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤
        logger.info("TestHandler initialized")

    async def handle_start_test(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
        """
        try:
            user_id = callback_query.from_user.id
            logger.info(f"Starting test for user {user_id}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –Ω–∞—á–∞–ª–æ –¥–µ–º–æ-—Ç–µ—Å—Ç–∞
            analytics_service.log_demo_initiation(user_id)

            question = self.test_service.start_test(user_id)
            if not question:
                logger.error(f"No questions available for user {user_id}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_manager.delete_last_message(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = await callback_query.message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_manager.last_messages[user_id] = error_message
                return

            await self._send_question(callback_query, question)

        except Exception as e:
            logger.error(f"Error starting test: {str(e)}")
            
            user_id = callback_query.from_user.id
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = error_message

    async def handle_answer(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        """
        try:
            user_id = callback_query.from_user.id
            logger.info(f"Received answer from user {user_id}")

            answer_num = int(callback_query.data.split('_')[1])
            logger.info(f"User {user_id} selected answer {answer_num}")

            result = self.test_service.answer_question(user_id, answer_num)

            # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–Ω–æ, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º message_manager

            if result.get('next_question'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await self._send_question(callback_query, result['next_question'])
            else:
                await self._send_results(callback_query, user_id)
                self.test_service.end_test(user_id)

        except Exception as e:
            logger.error(f"Error handling answer: {str(e)}")
            
            user_id = callback_query.from_user.id
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = error_message

    async def _send_question(self, callback_query: types.CallbackQuery, question: dict):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        if not question:
            logger.error("Attempted to send empty question")
            return

        user_id = callback_query.from_user.id

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        for i, option in enumerate(question['options']):
            # –ü–æ–º–µ—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –∫–Ω–æ–ø–∫—É
            keyboard.append([InlineKeyboardButton(text=option, callback_data=f"answer_{i}")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        total_questions = len(self.test_service.user_sessions[user_id]['questions'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        current_index = self.test_service.user_sessions[user_id]['current_question']
        
        # ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å)
        current_question_id = question['id']
        if isinstance(current_question_id, str) and current_question_id.startswith('demo_'):
            current_question_id = current_question_id.replace('demo_', '')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ + 1 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        current_question_number = current_index + 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        formatted_text = f"""
<b>–í–æ–ø—Ä–æ—Å {current_question_number} –∏–∑ {total_questions}</b>

{question['question']}
"""

        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
            new_message = await callback_query.message.answer(
                text=formatted_text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_manager.last_messages[user_id] = new_message
            
            logger.info(f"Sent question ID {question['id']} to user")
        except Exception as e:
            logger.error(f"Error sending question: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = error_message

    async def _send_results(self, callback_query: types.CallbackQuery, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
        """
        try:
            logger.info(f"Sending test results to user {user_id}")
            results = self.test_service.get_test_results(user_id)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ-—Ç–µ—Å—Ç–∞
            analytics_service.log_demo_completion(
                user_id, 
                results['score'], 
                results['total']
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–≥–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —á–µ–∫-–ª–∏—Å—Ç–∞
            checklist_data = self.checklist_service.generate_checklist(results['failed_tags'])
            tags_analysis = checklist_data['tags_analysis']

            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            message = f"""
<b>üéì –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! üéì</b>

<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {results['score']}/{results['total']}

<b>–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {int((results['score'] / results['total']) * 100)}%

{tags_analysis}
"""

            # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É: –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç
            keyboard = [
                [InlineKeyboardButton(text="üìã –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç", callback_data=f"checklist_{user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            new_message = await callback_query.message.answer(
                text=message,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
            message_manager.last_messages[user_id] = new_message
            
            logger.info(f"Test results sent to user {user_id}")

        except Exception as e:
            logger.error(f"Error sending results: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞."
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = error_message
            
    async def handle_checklist(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞
        """
        try:
            user_id = int(callback_query.data.split('_')[1])
            logger.info(f"Generating checklist for user {user_id}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞
            analytics_service.log_checklist_request(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            results = self.test_service.get_test_results(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'failed_tags' –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if 'failed_tags' not in results:
                logger.error(f"Failed_tags missing in results for user {user_id}")
                logger.info(f"Results content: {results}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_manager.delete_last_message(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = await callback_query.message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ."
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_manager.last_messages[user_id] = error_message
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ failed_tags - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if not isinstance(results['failed_tags'], list):
                logger.error(f"Failed_tags is not a list for user {user_id}. Type: {type(results['failed_tags'])}")
                logger.info(f"Failed_tags content: {results['failed_tags']}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_manager.delete_last_message(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = await callback_query.message.answer(
                    "–î–∞–Ω–Ω—ã–µ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ."
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_manager.last_messages[user_id] = error_message
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
            logger.info(f"Generating checklist with tags: {results['failed_tags']}")
            checklist_data = self.checklist_service.generate_checklist(results['failed_tags'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞
            if not isinstance(checklist_data, dict) or 'resources' not in checklist_data:
                logger.error(f"Invalid checklist data for user {user_id}: {checklist_data}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_manager.delete_last_message(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = await callback_query.message.answer(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_manager.last_messages[user_id] = error_message
                return
            
            resources = checklist_data['resources']
            
            if not resources:
                message = """
<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫! üéâ</b>

–í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å —Ç–µ—Å—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É —É –Ω–∞—Å –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å.
"""
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
                resources_text = "\n\n".join([
                    f"<b>{index + 1}. <a href='{res['url']}'>{res['title']}</a></b>\n{res['description']}"
                    for index, res in enumerate(resources)
                ])
                
                message = f"""
<b>üìö –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ üìö</b>

–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —É–ª—É—á—à–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç—è—Ö, –≥–¥–µ –±—ã–ª–∏ –¥–æ–ø—É—â–µ–Ω—ã –æ—à–∏–±–∫–∏:

{resources_text}
"""
            
            # –ö–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –¥–µ–º–æ-—Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ" –∏ "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é"
            keyboard = [
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –¥–µ–º–æ-—Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data="start_test")],
                [InlineKeyboardButton(text="‚ú® –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è 149 —Ä—É–±/–º–µ—Å", callback_data="full_version")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º
            new_message = await callback_query.message.answer(
                text=message,
                reply_markup=reply_markup,
                parse_mode="HTML",
                disable_web_page_preview=False  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Å—ã–ª–æ–∫
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
            message_manager.last_messages[user_id] = new_message
            
            logger.info(f"Checklist sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending checklist: {str(e)}")
            
            # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
            current_user_id = callback_query.from_user.id
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(current_user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫-–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[current_user_id] = error_message
            
    async def handle_full_version(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è"
        """
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–µ—Ö–∞–ª–∞ –≤ full_version_handler
        # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        pass
        
    async def handle_continue_demo_test(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç" –≤ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏.
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞.
        """
        user_id = callback_query.from_user.id
        logger.info(f"User {user_id} requested to continue demo test with new questions")
        
        try:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback_query.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            preparing_message = await callback_query.message.answer(
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞..."
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = preparing_message
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.test_service.end_test(user_id)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
            question = self.test_service.start_test(user_id)
            
            if not question:
                logger.error(f"No questions available for user {user_id}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_manager.delete_last_message(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = await callback_query.message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_manager.last_messages[user_id] = error_message
                return
                
            await self._send_question(callback_query, question)
            logger.info(f"Started continued demo test for user {user_id}")
            
        except Exception as e:
            logger.error(f"Error continuing demo test: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_manager.delete_last_message(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_manager.last_messages[user_id] = error_message